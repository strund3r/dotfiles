help-k8s-decrypt-secret() {
cat << EOF

Usage:
  k8s-decrypt-secret [options] <secret> <namespace>

Options:
  <secret>              kubernetes secret
  <namespace>           kubernetes namespace
  -v                    verbose output (show kubectl command)
  -h                    show this help

EOF
}

# k8s-decrypt-secret() {
#     if (( "$#" == 0 )); then
#         help-k8s-decrypt-secret
#         exit 1
#     fi

#     verbose=false

#     while getopts ":vh" opt; do
#         case $opt in
#         v)
#             if (( "$#" < 2 ))
#             then
#                 echo "usage error: secret and namespace required" >&2
#                 exit 1
#             fi
#             verbose=true
#             ;;
#         h)
#             help-k8s-decrypt-secret
#             exit
#             ;;
#         \?)
#             echo "invalid option: -$OPTARG" >&2
#             exit 1
#             ;;
#         esac
#     done

#     if ! $verbose
#     then
#         if (( "$#" < 2 ))
#         then
#             echo "usage error: secret and namespace required" >&2
#             exit 1
#         fi
#         kubectl get secret "$1" -o json -n "$2" | jq '.data | map_values(@base64d)' >&2
#     else
#         if (( "$#" < 3 ))
#         then
#             echo "usage error: secret, namespace and verbose option required" >&2
#             exit 1
#         fi
#         echo ""
#         echo "kubectl get secret \"$2\" -o json -n \"$3\" | jq '.data | map_values(@base64d)'"
#         echo ""
#         kubectl get secret "$2" -o json -n "$3" | jq '.data | map_values(@base64d)' >&2
#     fi
# }

# k8s-decrypt-secret "$@"


help-k8s-decrypt-secret() {
    echo ""
    echo "Usage"
    echo "  k8s-decrypt-secret [options] <secret> <namespace>"
    echo ""
    echo "Options:"
    echo "  <secret>              kubernetes secret"
    echo "  <namespace>           kubernetes namespace"
    echo "  -v                    verbose output (show kubectl command)"
    echo "  -h                    show this help"
}

k8s-decrypt-secret() {
    if (( "$#" == 0 )); then
        help-k8s-decrypt-secret
    fi

    while getopts ":vh" opt; do
        case $opt in
        v)
            if (( "$#" == 1 ))
            then
                echo "usage error: secret and namespace required" >&2
                exit 1
            elif (( "$#" == 2 ))
            then
                echo "usage error: namespace required" >&2
                exit 1
            elif (( "$#" == 3 ))
            then
                echo ""
                echo "kubectl get secret \"$2\" -o json -n \"$3\" | jq '.data | map_values(@base64d)'"
                echo ""
                kubectl get secret "$2" -o json -n "$3" | jq '.data | map_values(@base64d)' >&2
            fi
            exit
            ;;
        h)
            help-k8s-decrypt-secret
            exit
            ;;
        \?)
            echo "invalid option: -$OPTARG" >&2
            exit
            ;;
        esac
    done

    if (( "$#" == 1 ))
    then
        echo "usage error: namespace required" >&2
        exit 1
    elif (( "$#" == 2 ))
    then
        kubectl get secret "$1" -o json -n "$2" | jq '.data | map_values(@base64d)' >&2
    fi
}

k8s-decrypt-secret "$@"
